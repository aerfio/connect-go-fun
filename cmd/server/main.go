package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"time"

	greetv1 "aerf.io/connect-go-fun/gen/greet/v1"        // generated by protoc-gen-go
	"aerf.io/connect-go-fun/gen/greet/v1/greetv1connect" // generated by protoc-gen-connect-go
	"connectrpc.com/connect"
	"github.com/bufbuild/protovalidate-go"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"
	"google.golang.org/protobuf/types/known/timestamppb"
)

type GreetServer struct{}

func (s *GreetServer) CreateUser(ctx context.Context, c *connect.Request[greetv1.CreateUserRequest]) (*connect.Response[greetv1.CreateUserResponse], error) {
	return connect.NewResponse[greetv1.CreateUserResponse](&greetv1.CreateUserResponse{
		User: &greetv1.User{
			Email:      "email@gmail.com",
			BirthDate:  timestamppb.New(time.Now().Add(-10 * time.Second)),
			SignupDate: timestamppb.Now(),
		},
	}), nil
}

var _ greetv1connect.GreetServiceHandler = &GreetServer{}

func (s *GreetServer) Greet(
	ctx context.Context,
	req *connect.Request[greetv1.GreetRequest],
) (*connect.Response[greetv1.GreetResponse], error) {
	(&greetv1.GreetResponse{}).ProtoMessage()
	log.Println("Request headers: ", req.Header())
	v, err := protovalidate.New()
	if err != nil {
		return nil, err
	}
	if err := v.Validate(req.Msg); err != nil {
		return nil, err
	}
	res := connect.NewResponse(&greetv1.GreetResponse{
		Greeting: fmt.Sprintf("Hello, %s!", req.Msg.Name),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

func main() {
	fmt.Println("starting...")
	greeter := &GreetServer{}
	mux := http.NewServeMux()
	path, handler := greetv1connect.NewGreetServiceHandler(greeter)
	mux.Handle(path, handler)
	if err := http.ListenAndServe(
		":8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	); err != nil {
		panic(err)
	}
}
